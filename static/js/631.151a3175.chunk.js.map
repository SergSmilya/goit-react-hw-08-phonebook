{"version":3,"file":"static/js/631.151a3175.chunk.js","mappings":"mNAIe,SAASA,EAAT,GAAiC,IAAbC,EAAY,EAAZA,SAC3BC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,0BACE,wBACGF,EAASG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,2BACE,yBACGD,EADH,MACU,0BAAOC,QAGjB,mBAAQC,QAAS,kBAAMN,GAASO,EAAAA,EAAAA,IAAcJ,GAA7B,EAAmCK,KAAK,SAAzD,8BALOL,EADG,OAcrB,C,wBCpBc,SAASM,IACtB,IAAMT,GAAWC,EAAAA,EAAAA,MAOjB,OACE,0BACE,SAAC,KAAD,CAAQS,gBAAiB,CAAEC,OAAQ,IAAnC,UACE,uCAEE,SAAC,KAAD,CAAOH,KAAK,OAAOJ,KAAK,SAASQ,SAVzC,SAAsBC,GACpB,IAAMC,EAAQD,EAAEE,OAAOD,MAAME,cAC7BhB,GAASiB,EAAAA,EAAAA,IAAmBH,GAC7B,UAYF,C,kCChBc,SAASI,IACtB,IAAMnB,GAAWoB,EAAAA,EAAAA,IAAYC,EAAAA,IACvBpB,GAAWC,EAAAA,EAAAA,MAiBjB,IAMMoB,EAASC,EAAAA,GAAW,CACxBlB,KAAMkB,EAAAA,KAAaC,WACnBlB,OAAQiB,EAAAA,KAAaC,aAGvB,OACE,0BAEE,SAAC,KAAD,CACEC,cAfgB,CACpBpB,KAAM,GACNC,OAAQ,IAcJoB,iBAAkBJ,EAClBK,SAhCN,SAAsBC,EAAtB,IACEC,EAD2C,EAAbA,aAG9B,IAAMC,EAAoBF,EAAOvB,KAAKY,cAAcc,OAGlD/B,EAASgC,MAAK,SAAAC,GAAE,OAAIH,IAAsBG,EAAG5B,KAAKY,cAAcc,MAAhD,IAEhBG,MAAM,qBAIRjC,GAASkC,EAAAA,EAAAA,IAAWP,GACrB,EAgBG,UAKE,UAAC,KAAD,YACE,qCAEE,SAAC,KAAD,CAAOnB,KAAK,OAAOJ,KAAK,aAG1B,uCAEE,SAAC,KAAD,CAAOI,KAAK,MAAMJ,KAAK,eAGzB,mBAAQI,KAAK,SAAb,+BAKT,CCpDc,SAAS2B,IACtB,IAAMpC,GAAWoB,EAAAA,EAAAA,IAAYC,EAAAA,IACvBT,GAASQ,EAAAA,EAAAA,IAAYiB,EAAAA,IACrBC,GAAQlB,EAAAA,EAAAA,IAAYmB,EAAAA,IAEpBtC,GAAWC,EAAAA,EAAAA,OAEjBsC,EAAAA,EAAAA,YAAU,WACJF,GAAOrC,GAASwC,EAAAA,EAAAA,MACrB,GAAE,CAACxC,EAAUqC,IAQd,OACE,4BACE,SAACnB,EAAD,KAEA,sCACA,SAACT,EAAD,KACA,SAACX,EAAD,CAAUC,SAXLA,EAASY,QAAO,SAAA8B,GAAO,OAC5BA,EAAQrC,KAAKY,cAAc0B,SAAS/B,EADR,QAcjC,C","sources":["components/Contacts/Contacts.js","components/Filter/Filter.js","components/ContactForm/ContactForm.js","Pages/ContactsPage.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperation';\n\nexport default function Contacts({ contacts }) {\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <ul>\n        {contacts.map(({ id, name, number }) => (\n          <li key={id}>\n            <p>\n              {name}: <span>{number}</span>\n            </p>\n\n            <button onClick={() => dispatch(deleteContact(id))} type=\"button\">\n              delete contact\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nContacts.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n};\n","import { Formik, Field } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { chancheFilterValue } from 'redux/filterSlice';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n\n  function searchFilter(e) {\n    const value = e.target.value.toLowerCase();\n    dispatch(chancheFilterValue(value));\n  }\n\n  return (\n    <div>\n      <Formik initValueFilter={{ filter: '' }}>\n        <label>\n          Search\n          <Field type=\"text\" name=\"filter\" onChange={searchFilter}></Field>\n        </label>\n      </Formik>\n    </div>\n  );\n}\n\n// export default function Filter({ onFilterControl }) {\n//   function searchFilter(e) {\n//     const value = e.target.value.toLowerCase();\n//     onFilterControl(value);\n//   }\n\n//   return (\n//     <div>\n//       <Formik initValueFilter={{ filter: '' }}>\n//         <label>\n//           Search\n//           <Field type=\"text\" name=\"filter\" onChange={searchFilter}></Field>\n//         </label>\n//       </Formik>\n//     </div>\n//   );\n// }\n","import { Formik, Form, Field } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperation';\nimport { selectContacts } from 'redux/selectors';\n\nexport default function ContactForm() {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  function handleSubmit(values, { resetForm }) {\n    resetForm();\n\n    const dataNameLowerCase = values.name.toLowerCase().trim();\n\n    if (\n      contacts.find(el => dataNameLowerCase === el.name.toLowerCase().trim())\n    ) {\n      alert(`Contact was added`);\n      return;\n    }\n\n    dispatch(addContact(values));\n  }\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  // ValidationSchema\n  const Schema = yup.object({\n    name: yup.string().required(),\n    number: yup.number().required(),\n  });\n\n  return (\n    <div>\n      {/* Form */}\n      <Formik\n        initialValues={initialValues}\n        validationSchema={Schema}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <label>\n            Name\n            <Field type=\"text\" name=\"name\"></Field>\n          </label>\n\n          <label>\n            Number\n            <Field type=\"tel\" name=\"number\"></Field>\n          </label>\n\n          <button type=\"submit\">Add contact</button>\n        </Form>\n      </Formik>\n    </div>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport Contacts from 'components/Contacts/Contacts';\nimport Filter from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/contactsOperation';\nimport { useEffect } from 'react';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { selectContacts, selectFilter, selectToken } from 'redux/selectors';\n\nexport default function ContactsPage() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const token = useSelector(selectToken);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (token) dispatch(fetchContacts());\n  }, [dispatch, token]);\n\n  const onFilterSearch = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    );\n  };\n\n  return (\n    <div>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <Contacts contacts={onFilterSearch()} />\n    </div>\n  );\n}\n"],"names":["Contacts","contacts","dispatch","useDispatch","map","id","name","number","onClick","deleteContact","type","Filter","initValueFilter","filter","onChange","e","value","target","toLowerCase","chancheFilterValue","ContactForm","useSelector","selectContacts","Schema","yup","required","initialValues","validationSchema","onSubmit","values","resetForm","dataNameLowerCase","trim","find","el","alert","addContact","ContactsPage","selectFilter","token","selectToken","useEffect","fetchContacts","contact","includes"],"sourceRoot":""}