{"version":3,"file":"static/js/285.a621bb59.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.jsx","components/Contacts/Contacts.js","components/Filter/Filter.js","components/ContactForm/ContactForm.js","Pages/ContactsPage.jsx"],"sourcesContent":["import { ListItem, Typography } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperation';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ContactPhoneOutlinedIcon from '@mui/icons-material/ContactPhoneOutlined';\nimport { LoadingButton } from '@mui/lab';\nimport { selectIsLoadingContacts } from 'redux/selectors';\n\nexport default function ContactItem({ contact }) {\n  const { id, name, number } = contact;\n  const isLoading = useSelector(selectIsLoadingContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ListItem\n      sx={{\n        justifyContent: 'space-between',\n        border: '1px solid blue',\n        borderRadius: 1,\n        marginBottom: 1,\n      }}\n    >\n      <Typography\n        variant=\"subtitle1\"\n        sx={{ display: 'flex', alignItems: 'center' }}\n      >\n        <ContactPhoneOutlinedIcon sx={{ mr: 2 }} color=\"primary\" />\n        {name}:\n        <Typography ml={1} variant=\"subtitle2\" component=\"span\">\n          {number}\n        </Typography>\n      </Typography>\n\n      <LoadingButton\n        sx={{ opacity: 0.6, '&:hover, focus': { opacity: 1, color: 'red' } }}\n        color=\"warning\"\n        size=\"medium\"\n        variant=\"outlined\"\n        endIcon={<DeleteIcon />}\n        onClick={() => dispatch(deleteContact(id))}\n        loading={isLoading}\n        loadingPosition=\"end\"\n        type=\"button\"\n      >\n        delete contact\n      </LoadingButton>\n    </ListItem>\n  );\n}\n","import { List } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport ContactItem from 'components/ContactItem/ContactItem';\n\nexport default function Contacts({ contacts }) {\n  return (\n    <div>\n      <List>\n        {contacts.map(contact => (\n          <ContactItem key={contact.id} contact={contact} />\n        ))}\n      </List>\n    </div>\n  );\n}\n\nContacts.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n};\n","import { InputAdornment, TextField } from '@mui/material';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { chancheFilterValue } from 'redux/filterSlice';\nimport PersonSearchIcon from '@mui/icons-material/PersonSearch';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues: {\n      filter: '',\n    },\n  });\n\n  function searchFilter(e) {\n    const value = e.target.value.toLowerCase();\n    dispatch(chancheFilterValue(value));\n  }\n\n  return (\n    <div>\n      <form onChange={searchFilter}>\n        <TextField\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <PersonSearchIcon color=\"primary\" />\n              </InputAdornment>\n            ),\n          }}\n          variant=\"outlined\"\n          margin=\"normal\"\n          fullWidth\n          id=\"filter\"\n          name=\"filter\"\n          label=\"Search\"\n          value={formik.values.filter}\n          type=\"search\"\n          // onChange={searchFilter}\n          onChange={formik.handleChange}\n          helperText={formik.touched.filter && formik.errors.filter}\n          placeholder=\"Enter name\"\n        />\n      </form>\n    </div>\n  );\n}\n","import { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperation';\nimport { selectContacts, selectIsLoadingContacts } from 'redux/selectors';\nimport { LoadingButton } from '@mui/lab';\nimport PersonAddOutlinedIcon from '@mui/icons-material/PersonAddOutlined';\nimport { Box, TextField } from '@mui/material';\n\nexport default function ContactForm() {\n  const isLoading = useSelector(selectIsLoadingContacts);\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  // ValidationSchema\n  const Schema = yup.object({\n    name: yup.string().required(),\n    number: yup.number().required(),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validationSchema: Schema,\n    onSubmit: (values, { resetForm }) => {\n      resetForm();\n\n      const dataNameLowerCase = values.name.toLowerCase().trim();\n\n      if (\n        contacts.find(el => dataNameLowerCase === el.name.toLowerCase().trim())\n      ) {\n        alert(`Contact was added`);\n        return;\n      }\n\n      dispatch(addContact(values));\n    },\n  });\n\n  return (\n    <div>\n      {/* Form */}\n      <form onSubmit={formik.handleSubmit}>\n        <Box mb={1} sx={{ display: 'flex', justifyContent: 'space-between' }}>\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            id=\"name\"\n            name=\"name\"\n            label=\"Name\"\n            value={formik.values.name}\n            onChange={formik.handleChange}\n            helperText={formik.touched.name && formik.errors.name}\n            placeholder=\"Enter name\"\n          />\n\n          <TextField\n            fullWidth\n            variant=\"outlined\"\n            id=\"number\"\n            name=\"number\"\n            label=\"Number\"\n            value={formik.values.number}\n            onChange={formik.handleChange}\n            helperText={formik.touched.number && formik.errors.number}\n            placeholder=\"Enter number\"\n          />\n        </Box>\n        <LoadingButton\n          color=\"primary\"\n          size=\"medium\"\n          variant=\"outlined\"\n          endIcon={<PersonAddOutlinedIcon />}\n          loading={isLoading}\n          loadingPosition=\"end\"\n          type=\"submit\"\n          fullWidth\n        >\n          Add contact\n        </LoadingButton>\n      </form>\n    </div>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport Contacts from 'components/Contacts/Contacts';\nimport Filter from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/contactsOperation';\nimport React, { useEffect } from 'react';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { selectContacts, selectFilter, selectToken } from 'redux/selectors';\nimport { Alert, Button, Snackbar, Typography } from '@mui/material';\n\nexport default function ContactsPage() {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const token = useSelector(selectToken);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (token) dispatch(fetchContacts());\n  }, [dispatch, token]);\n\n  const onFilterSearch = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    );\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  return (\n    <div>\n      <Typography\n        variant=\"h4\"\n        component={'h1'}\n        align=\"center\"\n        color={'inherit'}\n        mb={2}\n      >\n        Contacts\n      </Typography>\n\n      <ContactForm />\n\n      <Filter />\n      <Contacts contacts={onFilterSearch()} />\n\n      <Snackbar open={false} autoHideDuration={9000}>\n        <Alert severity=\"warning\" sx={{ width: '100%' }}>\n          Alert\n        </Alert>\n      </Snackbar>\n\n      <div>\n        <Button onClick={handleClick}>Open simple snackbar</Button>\n        <Snackbar\n          open={open}\n          autoHideDuration={2000}\n          onClose={handleClose}\n          message=\"Note archived\"\n        >\n          <Alert severity=\"warning\" sx={{ width: '100%' }}>\n            Alert\n          </Alert>\n        </Snackbar>\n      </div>\n    </div>\n  );\n}\n"],"names":["ContactItem","contact","id","name","number","isLoading","useSelector","selectIsLoadingContacts","dispatch","useDispatch","ListItem","sx","justifyContent","border","borderRadius","marginBottom","Typography","variant","display","alignItems","ContactPhoneOutlined","mr","color","ml","component","LoadingButton","opacity","size","endIcon","Delete","onClick","deleteContact","loading","loadingPosition","type","Contacts","contacts","List","map","Filter","formik","useFormik","initialValues","filter","onChange","e","value","target","toLowerCase","chancheFilterValue","TextField","InputProps","startAdornment","InputAdornment","position","PersonSearch","margin","fullWidth","label","values","handleChange","helperText","touched","errors","placeholder","ContactForm","selectContacts","Schema","yup","required","validationSchema","onSubmit","resetForm","dataNameLowerCase","trim","find","el","alert","addContact","handleSubmit","Box","mb","PersonAddOutlined","ContactsPage","selectFilter","token","selectToken","useEffect","fetchContacts","React","open","setOpen","align","includes","Snackbar","autoHideDuration","Alert","severity","width","Button","onClose","message"],"sourceRoot":""}